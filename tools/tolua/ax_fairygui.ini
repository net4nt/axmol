[ax_fairygui]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = ax_fairygui

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = fgui

ax_headers = -I%(axdir)s/3rdparty -I%(axdir)s/axmol -I%(axdir)s/extensions -I%(axdir)s/extensions/fairygui/src -I%(axdir)s/extensions/fairygui/src/fairygui -I%(axdir)s/axmol/platform/android -I%(axdir)s/3rdparty/yasio -I%(axdir)s/3rdparty/fmt/include -I%(axdir)s/3rdparty/robin-map/include -I%(axdir)s/3rdparty/jni.hpp/include -I%(axdir)s/3rdparty/lua/plainlua -I%(axdir)s/3rdparty/lua/tolua -I%(axdir)s/extensions/scripting -I%(axdir)s/extensions/scripting/lua-bindings/manual -I%(axdir)s/3rdparty/glad/include -I%(axdir)s/3rdparty/box2d/include

ax_flags = 

# extra arguments for clang
evaluated_args = %(clang_flags)s %(android_flags)s %(ax_headers)s %(ax_flags)s %(extra_flags)s

# what headers to parse
headers = %(axdir)s/extensions/fairygui/src/fairygui/FairyGUI.h %(axdir)s/extensions/fairygui/src/fairygui/FairyGUIMacros.h %(axdir)s/extensions/fairygui/src/fairygui/utils/html/HtmlObject.h %(axdir)s/extensions/scripting/lua-bindings/manual/fairygui/axlua_fairygui_conversions.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".
classes = UIPackage GRoot GObject GComponent UIEventDispatcher GImage GMovieClip GTextField GBasicTextField GRichTextField GTextInput GGraph GLoader GGroup GButton GComboBox GProgressBar GSlider GScrollBar GList Window PopupMenu UIObjectFactory GObjectPool DragDropManager FairyGUIMacros EventContext Transition GController ScrollPane InputEvent GTween GTweener


# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

skip = EventContext::[getData],
	UIEventDispatcher::[^addEventListener$ ^removeEventListener$ ^hasEventListener$],
	GTween::[^to$],
	GTweener::[onUpdate onStart onComplete onComplete1],
	GController::[setup],
	GComponent::[^constructFromResource$],
	GMovieClip::[setPlaySettings],
	GObject::[^addClickListener$ removeClickListener getData],
	GRoot::[addPlaySoundListener],
	Transition::[^play$ setup],
	UIObjectFactory::[setPackageItemExtension],
	UIPackage::[getItemAsset],
	Window::[addAnimationListener]


rename_functions = 

rename_classes = 

# for all class names, should we remove something when registering in the target VM?
remove_prefix = 

# classes for which there will be no "parent" lookup
classes_have_no_parents = 

# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip =

# classes that create no constructor
# Set is special and we will use a hand-written constructor
abstract_classes = ArmatureDataManager Manifest GTextField

# Determining whether to use script object(js object) to control the lifecycle of native(cpp) object or the other way around. Supported values are 'yes' or 'no'.
script_control_cpp = no

